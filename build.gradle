plugins {
    // project plugins
    id 'java'
    id 'java-gradle-plugin'
    id 'groovy'
    // test coverage
    id 'jacoco'

    // ide plugin
    id 'idea'
    id 'eclipse'

    // intershop test plugin
    id 'com.intershop.gradle.test' version '2.4.0'

    // plugin for publishing to Gradle Portal
    id 'maven-publish'
    
    // artifact signing - necessary on Maven Central
    id 'signing'

    id 'com.gradle.plugin-publish' version '0.10.0'
}

// release configuration
group = 'com.intershop.gradle.architectural.report'
description 'Gradle architectural report plugin'

// adapt external loading at ArchitectureReportPlugin and README.md too
// IMPORTANT version referenced at com.intershop.tool.architecture.report.plugin.ArchitectureReportPlugin
version = '2.1.0'
// IMPORTANT version referenced at com.intershop.tool.architecture.report.plugin.ArchitectureReportPlugin

sourceCompatibility = 1.8
targetCompatibility = 1.8

// set correct project status
if (project.version.endsWith('-SNAPSHOT')) {
    status = 'snapshot'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task groovydocJar(type: Jar) {
    dependsOn groovydoc
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

// additional sources artifact
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        intershopMvn(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact groovydocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def root = asNode();
                root.appendNode('name', project.name)
                root.appendNode('description', project.description)
                root.appendNode('url', "https:/gitlab.intershop.de/IntershopGradlePlugins/${project.name}")

                def organisation = root.appendNode( 'organization' )
                organisation.appendNode("name", "Intershop Communications AG")
                organisation.appendNode("url", "http://intershop.com")

                def scm = root.appendNode( 'scm' )
                scm.appendNode( 'url', "https://github.com/IntershopCommunicationsAG/${project.name}")
                scm.appendNode( 'connection', "git@github.com:IntershopCommunicationsAG/${project.name}.git")
                scm.appendNode( 'developerConnection', "git@github.com:IntershopCommunicationsAG/${project.name}.git")

                def license = root.appendNode( 'licenses' ).appendNode( 'license' )
                license.appendNode( 'name', 'Apache License, Version 2.0' )
                license.appendNode( 'url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode( 'distribution', 'repo' )

                def developers = root.appendNode('developers')
                
                def developer1 = developers.appendNode( 'developer' )
                developer1.appendNode( 'id', 'Thomas-Bergmann' )
                developer1.appendNode( 'name', 'Thomas Bergmann' )
                developer1.appendNode( 'email', 'tbergmann@intershop.de' )

                def developer2 = developers.appendNode( 'developer' )
                developer2.appendNode( 'id', 'm-raab' )
                developer2.appendNode( 'name', 'M. Raab' )
                developer2.appendNode( 'email', 'mraab@intershop.de' )

                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
            
                        // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.(jar)\.asc$/
                    def ref_matcher = it.file =~ /\.html\.asc$/
                    def doc_matcher = it.file =~ /\.xml\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                        extension = "jar.asc"
                    } else {
                        if(ref_matcher.find()) {
                            classifier = 'reference'
                            extension = 'html.asc'
                        }
                        else if(doc_matcher.find()) {
                            classifier = 'docbook'
                            extension = 'xml.asc'
                        } else {
                            classifier = null
                            extension = 'jar.asc'
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = uri(version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl)
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }
}

signing {
    sign configurations.archives
}

pluginBundle {
    website = "https://github.com/IntershopCommunicationsAG/${project.name}"
    vcsUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"
    description = project.description
    tags = ['intershop', 'validation', 'analysis']

    plugins {
        gradleTestPlugin {
            id = 'com.intershop.gradle.architectural.report'
            displayName = project.description
        }
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile 'org.slf4j:slf4j-api:1.7.36'
    compile 'org.ow2.asm:asm:9.4'
    compile 'javax.inject:javax.inject:1'
    compile 'commons-io:commons-io:2.11.0'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'

    runtime 'org.apache.cxf:cxf-rt-rs-client:3.5.5'
    runtime 'org.apache.cxf:cxf-rt-transports-http:3.5.5'
    runtime 'org.apache.cxf:cxf-rt-transports-local:3.5.5'
    runtime 'ch.qos.logback:logback-classic:1.2.11'

    testCompile 'junit:junit:4.13.2'
}

repositories {
    mavenCentral()
}

model {
    tasks.generatePomFileForIntershopMvnPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishIntershopMvnPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishIntershopMvnPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
