# This workflow will build a Java project with Gradle
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  build:
    environment: CIRelease
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '11' ]
    name: Build & Test with Java ${{ matrix.Java }}
    steps:
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch --all --tags

      - name: Create .gradle dir
        run: mkdir -p $HOME/.gradle

      - name: Install gpg secret key
        env:
          SIGNINGFILE: ${{ secrets.SIGNINGFILE }}
        run: |
          gpg --batch --import "${{ secrets.SIGNINGFILE }}"
          gpg --list-secret-keys --keyid-format LONG

      - name: Export gpg file
        env:
          SIGNINGKEYID: ${{ secrets.SIGNINGKEYID }}
          SIGNINGPASSWORD: ${{ secrets.SIGNINGPASSWORD }}
        run: |
          gpg --batch --passphrase="$SIGNINGPASSWORD" --pinentry-mode loopback --export-secret-keys $SIGNINGKEYID > $HOME/.gradle/secrets.gpg

      - name: Create gradle sproperties
        env:
          APIKEY: ${{ secrets.APIKEY }}
          APISECRET: ${{ secrets.APISECRET }}
          SIGNINGKEYID: ${{ secrets.SIGNINGKEYID }}
          SIGNINGPASSWORD: ${{ secrets.SIGNINGPASSWORD }}
          SONATYPEPASSWORD: ${{ secrets.SONATYPEPASSWORD }}
          SONATYPEUSER: ${{ secrets.SONATYPEUSER }}
        run: echo -e "gradle.publish.key=$APIKEY\ngradle.publish.secret=$APISECRET\nsigning.keyId=$SIGNINGKEYID\nsigning.password=$SIGNINGPASSWORD\nsigning.secretKeyRingFile=$HOME/.gradle/secrets.gpg\nsonatypeUsername=$SONATYPEUSER\nsonatypePassword=$SONATYPEPASSWORD" > $HOME/.gradle/gradle.properties

      - name: Build and test with Gradle
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true"
        run: ./gradlew test build :publishIntershopMvnPublicationToMavenRepository --stacktrace --scan

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        if: always()
        with:
          files: build/test-results/**/*.xml

      - name: Post Build
        run: rm -f $HOME/.gradle/gradle.properties && rm -f $HOME/.docker/config.json
